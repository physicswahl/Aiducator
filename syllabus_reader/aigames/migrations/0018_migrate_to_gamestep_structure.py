# Generated by Django 4.2.3 on 2025-08-02 14:09

from django.db import migrations

def migrate_to_gamestep_structure(apps, schema_editor):
    """
    Create GameStep records for each unique (ai_game, step_number) combination
    and update InstructionStep and TeamStepProgress to reference them.
    """
    AiGame = apps.get_model('aigames', 'AiGame')
    GameStep = apps.get_model('aigames', 'GameStep')
    InstructionStep = apps.get_model('aigames', 'InstructionStep')
    TeamStepProgress = apps.get_model('aigames', 'TeamStepProgress')
    
    # Get all unique (ai_game, step_number) combinations from existing InstructionSteps
    step_combinations = InstructionStep.objects.filter(
        ai_game__isnull=False, 
        step_number__isnull=False
    ).values('ai_game', 'step_number').distinct()
    
    print(f"Found {len(step_combinations)} unique step combinations")
    
    # Create GameStep records
    for combo in step_combinations:
        ai_game = AiGame.objects.get(id=combo['ai_game'])
        step_number = combo['step_number']
        
        # Create GameStep with basic information
        game_step, created = GameStep.objects.get_or_create(
            ai_game=ai_game,
            step_number=step_number,
            defaults={
                'title': f"Step {step_number}",
                'description': f"Step {step_number} of {ai_game.title}",
                'is_active': True,
            }
        )
        
        if created:
            print(f"Created GameStep: {game_step}")
        
        # Update all InstructionSteps for this combination to reference the GameStep
        instruction_steps = InstructionStep.objects.filter(
            ai_game=ai_game,
            step_number=step_number
        )
        
        for instruction_step in instruction_steps:
            instruction_step.game_step = game_step
            instruction_step.save()
            print(f"Updated InstructionStep: {instruction_step.title}")
    
    # Update TeamStepProgress records
    # For each TeamStepProgress with an instruction_step, find the corresponding game_step
    for team_progress in TeamStepProgress.objects.filter(instruction_step__isnull=False):
        if team_progress.instruction_step.game_step:
            team_progress.game_step = team_progress.instruction_step.game_step
            team_progress.save()
            print(f"Updated TeamStepProgress: {team_progress}")

def reverse_migrate_to_gamestep_structure(apps, schema_editor):
    """
    Reverse the migration by clearing game_step references
    """
    InstructionStep = apps.get_model('aigames', 'InstructionStep')
    TeamStepProgress = apps.get_model('aigames', 'TeamStepProgress')
    GameStep = apps.get_model('aigames', 'GameStep')
    
    # Clear game_step references
    InstructionStep.objects.update(game_step=None)
    TeamStepProgress.objects.update(game_step=None)
    
    # Delete GameStep records
    GameStep.objects.all().delete()

class Migration(migrations.Migration):

    dependencies = [
        ('aigames', '0017_restore_gamestep_model'),
    ]

    operations = [
        migrations.RunPython(
            migrate_to_gamestep_structure,
            reverse_migrate_to_gamestep_structure
        ),
    ]
