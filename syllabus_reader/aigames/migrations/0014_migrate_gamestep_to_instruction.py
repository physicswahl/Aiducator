# Generated by Django 4.2.3 on 2025-08-02 13:36

from django.db import migrations


def migrate_gamestep_data(apps, schema_editor):
    """Migrate data from GameStep to InstructionStep"""
    GameStep = apps.get_model('aigames', 'GameStep')
    InstructionStep = apps.get_model('aigames', 'InstructionStep')
    
    for game_step in GameStep.objects.all():
        # Create student instruction if student_instructions exist
        if game_step.student_instructions:
            student_instruction = InstructionStep.objects.create(
                ai_game=game_step.ai_game,
                step_number=game_step.step_number,
                title=f"{game_step.title} (Student)",
                content=game_step.student_instructions,
                role='student',
                estimated_duration_minutes=game_step.estimated_duration_minutes,
                is_active=game_step.is_active,
                created_at=game_step.created_at,
                updated_at=game_step.updated_at,
                description=game_step.description
            )
        
        # Create teacher instruction if teacher_instructions exist
        if game_step.teacher_instructions:
            teacher_instruction = InstructionStep.objects.create(
                ai_game=game_step.ai_game,
                step_number=game_step.step_number,
                title=f"{game_step.title} (Teacher)",
                content=game_step.teacher_instructions,
                role='teacher',
                estimated_duration_minutes=game_step.estimated_duration_minutes,
                is_active=game_step.is_active,
                created_at=game_step.created_at,
                updated_at=game_step.updated_at,
                description=game_step.description
            )
            
            # If both exist, link teacher instruction after student instruction
            if game_step.student_instructions:
                student_instruction.next_instruction = teacher_instruction
                student_instruction.save()
        
        # If neither student nor teacher instructions exist, create a 'both' instruction
        if not game_step.student_instructions and not game_step.teacher_instructions:
            InstructionStep.objects.create(
                ai_game=game_step.ai_game,
                step_number=game_step.step_number,
                title=game_step.title,
                content=game_step.description or f"Step {game_step.step_number}: {game_step.title}",
                role='both',
                estimated_duration_minutes=game_step.estimated_duration_minutes,
                is_active=game_step.is_active,
                created_at=game_step.created_at,
                updated_at=game_step.updated_at,
                description=game_step.description
            )


def reverse_migrate_gamestep_data(apps, schema_editor):
    """Reverse migration - recreate GameStep from InstructionStep"""
    GameStep = apps.get_model('aigames', 'GameStep')
    InstructionStep = apps.get_model('aigames', 'InstructionStep')
    
    # Group instruction steps by game and step number
    from collections import defaultdict
    steps_by_game_and_number = defaultdict(list)
    
    for instruction in InstructionStep.objects.all():
        key = (instruction.ai_game_id, instruction.step_number)
        steps_by_game_and_number[key].append(instruction)
    
    # Recreate GameStep records
    for (ai_game_id, step_number), instructions in steps_by_game_and_number.items():
        # Find student and teacher instructions
        student_content = ""
        teacher_content = ""
        title = f"Step {step_number}"
        description = ""
        estimated_duration = None
        is_active = True
        created_at = None
        updated_at = None
        
        for instruction in instructions:
            if instruction.role == 'student':
                student_content = instruction.content
                title = instruction.title.replace(" (Student)", "")
            elif instruction.role == 'teacher':
                teacher_content = instruction.content
                title = instruction.title.replace(" (Teacher)", "")
            elif instruction.role == 'both':
                student_content = instruction.content
                title = instruction.title
            
            # Use the first instruction's metadata
            if not description:
                description = instruction.description
            if not estimated_duration:
                estimated_duration = instruction.estimated_duration_minutes
            if not created_at:
                created_at = instruction.created_at
            if not updated_at:
                updated_at = instruction.updated_at
            is_active = instruction.is_active
        
        GameStep.objects.create(
            ai_game_id=ai_game_id,
            step_number=step_number,
            title=title,
            description=description,
            student_instructions=student_content,
            teacher_instructions=teacher_content,
            estimated_duration_minutes=estimated_duration,
            is_active=is_active,
            created_at=created_at,
            updated_at=updated_at
        )


class Migration(migrations.Migration):

    dependencies = [
        ('aigames', '0013_add_instruction_fields'),
    ]

    operations = [
        migrations.RunPython(
            migrate_gamestep_data,
            reverse_migrate_gamestep_data
        ),
    ]
